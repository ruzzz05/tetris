<?xml version="1.0"?>

<project name="Tetris" basedir="." default="todo" xmlns:jacoco="antlib:org.jacoco.ant">
    <property name="src" value="src"/>
    <property name="test" value="test"/>
    <property name="lib" value="lib"/>
    <property name="etc" value="etc"/>
    <property name="classes" value="classes"/>
    <property name="log" value="log"/>
    <property name="doc" value="doc"/>
    <property name="conf" value="etc"/>

    <property name="package" value="es.unileon.prg1.tetris"/>
    <property name="packageStrategy" value="es.unileon.prg1.tetris.strategy"/>
    <property name="title" value="Tetris PRG1"/>

    <!-- Coverage -->
    <property name="coverage.result.dir" location="./coverage_report" />
    <property name="coverage.result.report.dir" location="${coverage.result.dir}/site/jacoco" />
    <property name="coverage.result.exec.file" location="${coverage.result.dir}/jacoco.exec" />
    <property name="log4j.config" location="log4j2.xml" />


    <path id="project.classpath">
        <fileset dir=".">
            <include name="${log4j.config}"/>
        </fileset>
        <fileset dir="${lib}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <!-- Jacoco Configuration -->
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="./lib/jacocoant.jar" />
    </taskdef>

    <target name="clean">
        <delete dir="${classes}"/>
        <delete dir="${doc}"/>
        <delete dir="${dist}"/>
        <delete file="${conf}/log.txt"/>
        <delete dir="${log}"/>
        <delete dir="${coverage.result.dir}" />
    </target>

    <target name="document" depends="compile">
        <mkdir dir="${doc}"/>
        <javadoc sourcepath="${src}" classpath="${lib}/log4j-api-2.5.jar:${lib}/log4j-core-2.5.jar" packagenames="${package},${packageStrategy}" destdir="${doc}" verbose="true" author="true" access="private" splitindex="true" version="true" windowtitle="${title}" doctitle="${titutitleo}"/>
    </target>

    <target name="compile" depends="clean">
        <mkdir dir="${classes}"/>
        <mkdir dir="${conf}"/>
        <javac srcdir="${src}" destdir="${classes}" classpath="${lib}/log4j-api-2.5.jar:${lib}/log4j-core-2.5.jar" verbose="true" debug="true"/>
        <echo message="Compilation done" file="${conf}/log.txt"/>
    </target>

    <target name="compileTests" depends="compile">
        <mkdir dir="${classes}"/>
        <javac srcdir="${test}" destdir="${classes}" classpathref="project.classpath" includeantruntime="false">
            <classpath>
                <pathelement path="${lib}/log4j-api-2.5.jar:${lib}/log4j-core-2.5.jar"/>
            </classpath>
        </javac>
        <echo message="Test compilation...done"/>
    </target>

    <target name="testColor" depends="compileTests">
        <java classname="org.junit.runner.JUnitCore">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${project.classpath}"/>
            </classpath>
            <arg value="es.unileon.prg1.tetris.strategy.AllTests"/>
        </java>
    </target>

    <target name="test" depends="compileTests">
        <mkdir dir="${log}"/>
           <!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
            <jacoco:coverage destfile="${coverage.result.exec.file}">
                <junit showoutput="true" printsummary="yes" haltonfailure="no" enabletestlistenerevents="true" fork="true" >

                    <classpath>
                        <pathelement path="${classes}" />
                        <pathelement path="${conf}" />
                        <pathelement path="${lib}:${lib}/log4j-api-2.5.jar:${lib}/log4j-core-2.5.jar:${lib}/junit-4.8.2.jar:${etc}"/>                    
                    </classpath>

                    <batchtest todir="${coverage.result.dir}">
                        <fileset dir="${classes}">
                            <!-- Exclude inner classes.dir -->
                            <exclude name="**/*$*.class" />
                            <include name="**/*Test.class" />
                        </fileset>
                    </batchtest>
                    
                    <!-- To dump junit report into a file-->
                    <test name="${package}.AllTests" haltonfailure="no" outfile="TEST-result" todir="${log}">
                        <formatter type="xml"/>
                    </test>
                </junit>
                
            </jacoco:coverage>
    </target>

    <target name="report" depends="test, document">
        <!-- Step 3: Create coverage report -->
        <jacoco:report>

            <!-- This task needs the collected execution data and ... -->
            <executiondata>
                <file file="${coverage.result.exec.file}" />
            </executiondata>

            <!-- the class files and optional source files ... -->
            <structure name="Coverage with Jacoco">
                <classfiles>
                    <fileset dir="${classes}">
                        <exclude name="**/*Test*.class" />
                        <exclude name="**/ui/*.class" />
                        <exclude name="**/prg1/*.class" />
                    </fileset>
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${src}" />
                </sourcefiles>
            </structure>

            <!-- to produce reports in different formats. -->
            <html destdir="${coverage.result.report.dir}" />
            <csv destfile="${coverage.result.report.dir}/report.csv" />
            <xml destfile="${coverage.result.report.dir}/report.xml" />
        </jacoco:report>
    
        <echo message="Generating coverage report with jacoco...done"/>

    </target>

    <target name="run" depends="compile">
        <java fork = "true" classname="es.unileon.prg1.tetris.MainTetris">
            <classpath>
                <pathelement path="${classes}"/>
                <pathelement path="${lib}/log4j-api-2.5.jar:${lib}/log4j-core-2.5.jar:${etc}"/>
            </classpath>
            <arg value="10"/>
            <arg value="6"/>
            <arg value="nocolor"/>
        </java>
    </target>

    <target name="todo" depends="report, run"/>

</project>
